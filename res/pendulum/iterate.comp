#version 430 core
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D states;

uniform float u_time;
uniform float u_dtime;

const float PI = 3.1415926538;

vec4 get(ivec2 pixel_coords) {
	return imageLoad(states, pixel_coords);
}
void set(ivec2 pixel_coords, vec4 state) {
	imageStore(states, pixel_coords, state);
}

const int NC = 1;
struct Model_Params {
	float C, R, d, w, r;
	// vec2 nodes[NC];
};
// const
Model_Params model_params;// = Model_Params(.2, .2, .1, 10);

vec2 rotate(vec2 p, float t) {
	float c = cos(t), s = sin(t);
	return vec2(p.x * c - p.y * s, p.x * s + p.y * c);
}

vec4 get_derivative(vec4 p, float t) {
	vec2 pos = p.xy, vel = p.zw;
	vec2 force = -(model_params.C * pos + model_params.R * vel);
	float dd = model_params.d * model_params.d;
	for(int i = 0; i < NC; i++) {
		vec2 node = rotate(vec2(model_params.r, 0), 2 * PI * float(i) / NC + t * model_params.w);
		vec2 dp = node - pos;
		force += dp / pow(dot(dp, dp) + dd, 1.5);
	}
	return vec4(vel.xy, force.xy);
}

vec4 iterate(vec4 s, float t, float h) {
	vec4 K1 = get_derivative(s, t);
	return s + K1 * h;
}
vec4 iterate_4(vec4 s, float t, float h) {
	vec4 K1 = get_derivative(s, t);
	vec4 K2 = get_derivative(s + K1 * h / 2, t + h / 2);
	vec4 K3 = get_derivative(s + K2 * h / 2, t + h / 2);
	vec4 K4 = get_derivative(s + K3 * h, t + h);
	return s + (h / 6) * (K1 + 2 * K2 + 2 * K3 + K4);
}

void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 dims = imageSize(states);

	float M = 5;

	float x = float(pixel_coords.x) / float(dims.x);
	float w = 1000;//exp(mix(log(1), log(2), x));

	model_params = Model_Params(.2, .2, .1, w, .5);	

	// const Model_Params model_params = Model_Params(.2, .2, .1, 10);

	vec4 s = get(pixel_coords);
	set(pixel_coords, 
		// pixel_coords.x * 2 < dims.x ?
		// iterate(s, u_time / M, u_dtime / M) :
		iterate_4(s, u_time / M, u_dtime / M)
	);
}