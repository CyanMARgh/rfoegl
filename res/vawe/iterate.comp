#version 430 core
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D u_states_in;
layout(rgba32f, binding = 1) uniform image2D u_states_out;

uniform float u_time;
uniform float u_dtime;

const float time_scale = 1;

ivec2 dims = ivec2(0, 0);
vec4 get(ivec2 p) {
	p.x = p.x < 0 ? 0 : p.x >= dims.x ? dims.x - 1 : p.x;
	p.y = p.y < 0 ? 0 : p.y >= dims.y ? dims.y - 1 : p.y; 
	return imageLoad(u_states_in, p);
}
bool is_inside(ivec2 p) {
	return p.x >= 1 || p.x < dims.x - 1 || p.y >= 1 || p.y < dims.y - 1;
}
void set(ivec2 p, vec4 state) {
	imageStore(u_states_out, p, state);
}

bool is_lamp(vec2 uv) {
	return false;
	// return uv.y < -.9 && abs(abs(uv.x) - .5) < .02;
	// return uv.y < -.9 && abs(uv.x) < .02;
	// return length(uv) < .1;
}
float get_speed(vec2 uv) {
	// return 1;
	return length(uv) < .3 ? .44 : 1;
}
float get_absorption(vec2 uv) {
	uv = abs(uv);
	float h = min(1.5 - uv.x, 1 - uv.y);
	return exp(-30 * h);
}

const float cell_size = .3;
void main() {
	ivec2 p0 = ivec2(gl_GlobalInvocationID.xy);
	dims = imageSize(u_states_in);

	float time = u_time * 50;
	float dtime = u_dtime * 50;

	vec2 uv = (vec2(p0) / vec2(dims) - .5) * 2;
	uv.x *= float(dims.x) / float(dims.y);

	float omega = .1;

	if(is_lamp(uv)) {
		set(p0, vec4(sin(time * omega) * 2));
	} else {
		vec4 s = vec4(0);
		int sc = 0;
		const int R = 2;
		for(int x = -R; x <= R; x++) {
			for(int y = -R; y <= R; y++) {
				if(x == 0 && y == 0) continue;
				s += get(p0 + ivec2(x, y));
				sc += int(is_inside(p0 + ivec2(x, y)));
			}
		}
		// vec4 s = 
		// 	get(p0 + ivec2( 1,  0)) +
		// 	get(p0 + ivec2(-1,  0)) +
		// 	get(p0 + ivec2( 0,  1)) +
		// 	get(p0 + ivec2( 0, -1));
		vec4 C = get(p0);
		float F = (s.x / sc - C.x) / cell_size * get_speed(uv);
		C.y += F * dtime;
		C.x += C.y * dtime;
		float A = get_absorption(uv);
		C.x -= C.x * A * dtime;
		C.y -= C.y * A * dtime;
		set(p0, C);
	}
}